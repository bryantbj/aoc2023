# AdventOfCode 2023 - Day 2

## Part 1

```elixir
defmodule Input do
  def requirements do
    %{"red" => 12, "green" => 13, "blue" => 14}
  end

  def puzzle_input do
    File.stream!("#{__DIR__}/2.txt")
  end

  def example_input do
    """
    Game 1: 3 blue, 4 red; 1 red, 2 green, 6 blue; 2 green
    Game 2: 1 blue, 2 green; 3 green, 4 blue, 1 red; 1 green, 1 blue
    Game 3: 8 green, 6 blue, 20 red; 5 blue, 4 red, 13 green; 5 green, 1 red
    Game 4: 1 green, 3 red, 6 blue; 3 green, 6 red; 3 green, 15 blue, 14 red
    Game 5: 6 red, 1 blue, 3 green; 2 blue, 1 red, 2 green
    """
    |> String.trim()
    |> String.split("\n")
  end
end
```

<!-- livebook:{"output":true} -->

```
{:module, Input, <<70, 79, 82, 49, 0, 0, 9, ...>>, {:example_input, 0}}
```

```elixir
String.split(hd(Input.example_input()), ~r/:|;|,/) |> Enum.map(&String.trim/1)
```

<!-- livebook:{"output":true} -->

```
["Game 1", "3 blue", "4 red", "1 red", "2 green", "6 blue", "2 green"]
```

```elixir
defmodule A do
  def parse_line(line) do
    ["Game " <> id | cubes] =
      line
      |> String.split(~r/:|;|,/)
      |> Enum.map(&String.trim/1)

    cubes =
      cubes
      |> Enum.reduce(%{}, fn info, acc ->
        [num, color] = String.split(info, " ")

        num = String.to_integer(num)

        # Only keep the largest number
        Map.update(acc, color, num, &((num > &1 && num) || &1))
      end)

    {String.to_integer(id), cubes}
  end

  def parse_input(input \\ Input.example_input()) do
    input
    |> Stream.map(&parse_line/1)
  end

  def line_meets_requirements?({_id, cubes}) do
    cubes["red"] <= Input.requirements()["red"] &&
      cubes["green"] <= Input.requirements()["green"] &&
      cubes["blue"] <= Input.requirements()["blue"]
  end

  def solve(input \\ Input.example_input()) do
    input
    |> parse_input()
    |> Stream.filter(&line_meets_requirements?/1)
    |> Stream.map(fn {id, _} -> id end)
    |> Enum.sum()
  end
end
```

<!-- livebook:{"output":true} -->

```
{:module, A, <<70, 79, 82, 49, 0, 0, 18, ...>>, {:solve, 1}}
```

Test input:

```elixir
Input.example_input()
|> A.solve()
```

<!-- livebook:{"output":true} -->

```
8
```

Solve:

```elixir
Input.puzzle_input()
|> A.solve()
```

<!-- livebook:{"output":true} -->

```
2204
```

## Part 2

```elixir
defmodule InputB do
  def requirements do
    %{"red" => 12, "green" => 13, "blue" => 14}
  end

  def puzzle_input do
    File.stream!("#{__DIR__}/2.txt")
  end

  def example_input do
    """
    Game 1: 3 blue, 4 red; 1 red, 2 green, 6 blue; 2 green
    Game 2: 1 blue, 2 green; 3 green, 4 blue, 1 red; 1 green, 1 blue
    Game 3: 8 green, 6 blue, 20 red; 5 blue, 4 red, 13 green; 5 green, 1 red
    Game 4: 1 green, 3 red, 6 blue; 3 green, 6 red; 3 green, 15 blue, 14 red
    Game 5: 6 red, 1 blue, 3 green; 2 blue, 1 red, 2 green
    """
    |> String.trim()
    |> String.split("\n")
  end
end
```

<!-- livebook:{"output":true} -->

```
{:module, InputB, <<70, 79, 82, 49, 0, 0, 9, ...>>, {:example_input, 0}}
```

```elixir
defmodule B do
  def parse_line(line) do
    ["Game " <> id | cubes] =
      line
      |> String.split(~r/:|;|,/)
      |> Enum.map(&String.trim/1)

    cubes =
      cubes
      |> Enum.reduce(%{}, fn info, acc ->
        [num, color] = String.split(info, " ")

        num = String.to_integer(num)

        # Only keep the largest number
        Map.update(acc, color, num, &((num > &1 && num) || &1))
      end)

    {String.to_integer(id), cubes}
  end

  def parse_input(input \\ Input.example_input()) do
    input
    |> Stream.map(&parse_line/1)
  end

  def line_meets_requirements?({_id, cubes}) do
    cubes["red"] <= Input.requirements()["red"] &&
      cubes["green"] <= Input.requirements()["green"] &&
      cubes["blue"] <= Input.requirements()["blue"]
  end

  def solve(input \\ Input.example_input()) do
    input
    |> parse_input()
    |> Stream.map(fn {_id, %{"red" => red, "green" => green, "blue" => blue}} ->
      red * green * blue
    end)
    |> Enum.sum()
  end
end
```

<!-- livebook:{"output":true} -->

```
{:module, B, <<70, 79, 82, 49, 0, 0, 18, ...>>, {:solve, 1}}
```

Test input:

```elixir
InputB.example_input()
|> B.solve()
```

<!-- livebook:{"output":true} -->

```
2286
```

Solve:

```elixir
InputB.puzzle_input()
|> B.solve()
```

<!-- livebook:{"output":true} -->

```
71036
```

Success!!
